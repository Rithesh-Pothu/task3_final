{"version":3,"sources":["Rithesh.jpg","purush.jpg","components/card.js","components/Resume.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["module","exports","Cards","cardsData","data","details","console","log","images","logo","logo1","className","style","display","justifyContent","flexWrap","map","values","index","id","key","src","card","name","href","email","mobile","description","to","pathname","personcard","Resume","props","profile","location","image","rithesh","purush","alt","careerobjective","info1","border","ed1","institute","degree","passoutyear","percentage","ed2","ed3","tech1","title","info","tech2","tech3","App","exact","path","component","resume","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48d265ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Rithesh.4d7c5c4f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/purush.d42e5078.jpg\";","import React from \"react\";\nimport data from \"../data.json\";\nimport logo from \"../logo.svg\";\nimport logo1 from \"../logo.svg\";\nimport { Link } from \"react-router-dom\";\nlet Cards = () => {\n  let cardsData = data.details;\n  console.log(cardsData);\n  let images = [logo, logo1];\n  return (\n    <div className=\"container\">\n      <h1 className=\"text-primary\">Select one</h1>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          flexWrap: \"wrap\",\n        }}\n        className=\"row\"\n      >\n        {cardsData.map((values, index) => (\n          <div id=\"cards\" className=\"\" key={index}>\n            <div className=\"card\">\n              <img className=\"card-img-top\" src={images[index]} />\n              <h1>{values.card.name}</h1>\n              <a href={\"mailto:\" + values.card.email}>\n                <h3>{values.card.email}</h3>\n              </a>\n              <h4>{values.card.mobile}</h4>\n              <h4>{values.card.description}</h4>\n              <Link\n                to={{ pathname: \"/resume\", personcard: { id: index } }}\n                className=\"btn btn-primary\"\n              >\n                click me\n              </Link>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\nexport default Cards;\n","import React from \"react\";\nimport data from \"../data.json\";\nimport rithesh from \"../Rithesh.jpg\";\nimport purush from \"../purush.jpg\";\n\nfunction Resume(props) {\n  let profile = data.details[props.location.personcard.id];\n  console.log(profile);\n  var src;\n  if (profile.card.image === \"rithesh\") {\n    src = rithesh;\n  } else {\n    src = purush;\n  }\n  return (\n    <section className=\"mainsection\">\n      <section className=\"section1\">\n        <img src={src} alt=\"Rithesh\" className=\"profile\" />\n        <div className=\"imginfo\">\n          <h1>{profile.card.name}</h1>\n          <h4>{profile.card.email}</h4>\n          <h3>{profile.card.mobile}</h3>\n          <hr></hr>\n          <h5>Kadapa,AndhraPradesh</h5>\n        </div>\n      </section>\n      <section className=\"section2\">\n        <h1 className=\"heading\">Carrer Objective:</h1>\n        <h4>{profile.careerobjective.info1}</h4>\n        <br></br>\n        <h2 className=\"heading\">Educational Qualification</h2>\n        <div className=\"tbl\">\n          <table border=\"1\">\n            <tr>\n              <th>Institute</th>\n              <th>Degree</th>\n              <th>Passoutyear</th>\n              <th>Percentage</th>\n            </tr>\n            <tr>\n              <td>{profile.ed1.institute}</td>\n              <td>{profile.ed1.degree}</td>\n              <td>{profile.ed1.passoutyear}</td>\n              <td>{profile.ed1.percentage}</td>\n            </tr>\n            <tr>\n              <td>{profile.ed2.institute}</td>\n              <td>{profile.ed2.degree}</td>\n              <td>{profile.ed2.passoutyear}</td>\n              <td>{profile.ed2.percentage}</td>\n            </tr>\n            <tr>\n              <td>{profile.ed3.institute}</td>\n              <td>{profile.ed3.degree}</td>\n              <td>{profile.ed3.passoutyear}</td>\n              <td>{profile.ed3.percentage}</td>\n            </tr>\n          </table>\n        </div>\n        <br></br>\n        <h1 className=\"heading\">Technical Skills:</h1>\n        <h2>{profile.tech1.title}</h2>\n        <ul>\n          <li>{profile.tech1.info}</li>\n        </ul>\n        <h2>{profile.tech2.title}</h2>\n        <ul>\n          <li>{profile.tech2.info}</li>\n        </ul>\n        <h2>{profile.tech3.title}</h2>\n        <ul>\n          <li>{profile.tech3.info}</li>\n        </ul>\n      </section>\n    </section>\n  );\n}\nexport default Resume;\n","import React from \"react\";\nimport \"./App.css\";\nimport Cards from \"./components/card.js\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport resume from \"./components/Resume\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <Route exact path=\"/\" component={Cards} />\n          <Route exact path=\"/resume\" component={resume} />\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}